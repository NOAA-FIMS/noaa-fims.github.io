on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - changelog/FIMS_CHANGELOG.qmd

concurrency:
  group: ${{ github.workflow}}-${{ github.ref }}
  cancel-in-progress: true

name: Release and archive new release

jobs:
  release_and_archive:
    runs-on: ubuntu-latest
    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    steps:
      # Checkout the repo
      - uses: actions/checkout@v4

      # Set up Node (for Quarto, if needed; remove if not using Quarto)
      - uses: quarto-dev/quarto-actions/setup@v2
      
      - name: Get latest version from changelog
        id: changelog_version
        run: |
          VERSION_HEADING=$(grep -m1 '^## v' changelog/FIMS_CHANGELOG.qmd | sed -E 's/^## (v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?).*/\1/')
          echo "version_heading=$VERSION_HEADING" >> $GITHUB_OUTPUT

      - name: Get latest FIMS release tag
        id: fims_release
        run: |
          LATEST_TAG=$(curl --silent "https://api.github.com/repos/NOAA-FIMS/noaa-fims.github.io/releases/latest" | jq -r .tag_name | tr -d ' ')
          echo "fims_website_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      # - name: Should archive new release
      #   id: should_archive
      #   run: |
      #     if [ "${{ steps.changelog_version.outputs.version_heading }}" != "${{ steps.fims_release.outputs.fims_website_tag }}" ]; then
      #       echo "should_archive=true" >> $GITHUB_OUTPUT
      #     else
      #       echo "should_archive=false" >> $GITHUB_OUTPUT
      #     fi

      # Use this conditional for all release/archive steps
      - name: Update version in index.qmd
        if: steps.should_archive.outputs.should_archive == 'true'
        run: |
          VERSION=$(echo "${{ steps.changelog_version.outputs.version_heading }}" | sed 's/^v//')
          sed -i -E "s/Version [0-9]+\.[0-9]+\.[0-9]+/Version $VERSION/" index.qmd
          cat index.qmd
          
      # - name: Archive current site to archives folder
      #   if: steps.should_archive.outputs.should_archive == 'true'
      #   run: |
      #     ARCHIVE_DIR="_archives/${{ steps.get_fims_release.outputs.fims_website_tag }}"
      #     mkdir -p "$ARCHIVE_DIR"
      #     cp -rv docs/. "$ARCHIVE_DIR"/
      #     ls _archives
          
      # - name: Commit & Push changes
      #   if: steps.should_archive.outputs.should_archive == 'true'
      #   uses: actions-js/push@master
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}


      - name: Render Quarto Project
        # if: steps.should_archive.outputs.should_archive == 'true'
        uses: quarto-dev/quarto-actions/render@v2
        with:
          to: html

      - name: Upload artifact
        # if: steps.should_archive.outputs.should_archive == 'true'
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'docs/'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit and push rendered site to main
        # if: steps.should_archive.outputs.should_archive == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add docs/
          git commit -m "Update rendered site"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Create a release with the same tag as the FIMS repo
      - name: Create Release
        # if: steps.should_archive.outputs.should_archive == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.changelog_version.outputs.version_heading }}
          name: Release ${{ steps.changelog_version.outputs.version_heading }}
          body: |
            Website release synced with FIMS ${{ steps.changelog_version.outputs.version_heading }}.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
